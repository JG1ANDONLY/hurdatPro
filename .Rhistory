startEnd30Interval <- head(startEnd30Interval, -1)
temp <- data.frame(
id = eachDate$id[index],
date = eachDate$date[index],
time = startEnd30Interval,
numeric.latitude = eachDate$numeric.latitude[index],
numeric.longitude = eachDate$numeric.longitude[index]
)
newDF <- rbind(newDF, temp)
}
}
return(newDF)
}
}
storm_ids <- "AL011851"
storm_30min_incre(storm_ids)
storm_30min_incre <- function(storm.id) {
data("hurdat")
# determine if the input is empty
if (length(storm.id) == 0) {
stop("The input storm ID cannot be empty")
}
# determine if the input is a valid storm ID
if (!all(storm.id %in% hurdat$id)) {
stop("At least 1 value of the input is a valid storm ID.")
}
# subset hurdat based on input ID
track <- hurdat[
which(hurdat$id %in% storm.id),
c("id", "date", "time", "numeric.latitude", "numeric.longitude")
]
# create a new empty dataframe for later appending
newDF <- data.frame(id = c(), date = c(), time = c(), numeric.latitude = c(),
numeric.longitude = c())
# split dataframe based on ID
track_list <- split(track, track$id)
# loop through splitted dataframe
for (eachTrack in track_list) {
date_list <- split(eachTrack, eachTrack$date)
for (eachDate in date_list) {
eachDate <- rbind(eachDate, c(
eachDate$id[nrow(eachDate)],
eachDate$date[nrow(eachDate)], "2400",
eachDate$numeric.latitude[nrow(eachDate)],
eachDate$numeric.longitude[nrow(eachDate)]
))
rownames(eachDate) <- seq(nrow(eachDate))
for (index in 1:(nrow(eachDate) - 1)) {
start <- eachDate[index, "time"]
startHour <- substr(start, start = 1, stop = 2)
startMin <- substr(start, start = 3, stop = 4)
startTime <- paste0(startHour, ":", startMin)
end <- eachDate[index + 1, "time"]
endHour <- substr(end, start = 1, stop = 2)
endMin <- substr(end, start = 3, stop = 4)
endTime <- paste0(endHour, ":", endMin)
startTime <- strptime(startTime, format = "%H:%M")
endTime <- strptime(endTime, format = "%H:%M")
startEnd30Interval <- format(
seq.POSIXt(
from = startTime,
to = endTime, by = "30 min"
),
format = "%H%M"
)
startEnd30Interval <- head(startEnd30Interval, -1)
temp <- data.frame(
id = eachDate$id[index],
date = eachDate$date[index],
time = startEnd30Interval,
numeric.latitude = eachDate$numeric.latitude[index],
numeric.longitude = eachDate$numeric.longitude[index]
)
newDF <- rbind(newDF, temp)
}
}
return(newDF)
}
}
storm_ids <- c("AL011851", "AL021851")
storm_30min_incre(storm_ids)
getwd()
devtools::document()
data("hurdat")
test <- data("hurdat")
devtools::document()
storm_ids <- c("AL011851", "AL021851")
if (!all(storm.id %in% hurdat$id)) {
stop("At least 1 value of the input is a valid storm ID.")
}
if (!all(storm_ids %in% hurdat$id)) {
stop("At least 1 value of the input is a valid storm ID.")
}
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
getwd()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
data("hurdat")
View(hurdat)
devtools::check()
devtools::check()
View(hurdat)
library(testthat)
data("hurdat")
View(hurdat)
storm_30min_incre("AL061851")
testthat("Check if investigators are interested in the storm AL061851", {
library(testthat)
data("hurdat")
result <- storm_30min_incre("AL061851")
expect_equal(nrow(result), 192)
})
library(testthat)
testthat("Check if investigators are interested in the storm AL061851", {
data("hurdat")
result <- storm_30min_incre("AL061851")
expect_equal(nrow(result), 192)
})
test_that("Check if investigators are interested in the storm AL061851", {
data("hurdat")
result <- storm_30min_incre("AL061851")
expect_equal(nrow(result), 192)
})
library(testthat)
test_that("Check if investigators are interested in the storm AL061851", {
data("hurdat")
result <- storm_30min_incre("AL061851")
expect_equal(nrow(result), 192)
})
storm_30min_incre("AL061851")
library(devtools)
storm_30min_incre("AL061851")
storm_30min_incre <- function(storm.id) {
data("hurdat")
# determine if the input is empty
if (length(storm.id) == 0) {
stop("The input storm ID cannot be empty")
}
# determine if the input is a valid storm ID
if (!all(storm.id %in% hurdat$id)) {
stop("At least 1 value of the input is a valid storm ID.")
}
# subset hurdat based on input ID
track <- hurdat[
which(hurdat$id %in% storm.id),
c("id", "date", "time", "numeric.latitude", "numeric.longitude")
]
# create a new empty dataframe for later appending
newDF <- data.frame(id = c(), date = c(), time = c(), numeric.latitude = c(),
numeric.longitude = c())
# split dataframe based on ID
track_list <- split(track, track$id)
# loop through splitted dataframe
for (eachTrack in track_list) {
date_list <- split(eachTrack, eachTrack$date)
for (eachDate in date_list) {
eachDate <- rbind(eachDate, c(
eachDate$id[nrow(eachDate)],
eachDate$date[nrow(eachDate)], "2400",
eachDate$numeric.latitude[nrow(eachDate)],
eachDate$numeric.longitude[nrow(eachDate)]
))
rownames(eachDate) <- seq(nrow(eachDate))
for (index in 1:(nrow(eachDate) - 1)) {
start <- eachDate[index, "time"]
startHour <- substr(start, start = 1, stop = 2)
startMin <- substr(start, start = 3, stop = 4)
startTime <- paste0(startHour, ":", startMin)
end <- eachDate[index + 1, "time"]
endHour <- substr(end, start = 1, stop = 2)
endMin <- substr(end, start = 3, stop = 4)
endTime <- paste0(endHour, ":", endMin)
startTime <- strptime(startTime, format = "%H:%M")
endTime <- strptime(endTime, format = "%H:%M")
startEnd30Interval <- format(
seq.POSIXt(
from = startTime,
to = endTime, by = "30 min"
),
format = "%H%M"
)
startEnd30Interval <- head(startEnd30Interval, -1)
temp <- data.frame(
id = eachDate$id[index],
date = eachDate$date[index],
time = startEnd30Interval,
numeric.latitude = eachDate$numeric.latitude[index],
numeric.longitude = eachDate$numeric.longitude[index]
)
newDF <- rbind(newDF, temp)
}
}
return(newDF)
}
}
library(testthat)
test_that("Check if investigators are interested in the storm AL061851", {
data("hurdat")
result <- storm_30min_incre("AL061851")
expect_equal(nrow(result), 192)
})
library(hurdatPro)
library(testthat)
test_that("Check if the expanded 30-min-interval dataframe of the storm AL061851
has the same row number as wanted", {
data("hurdat")
result <- storm_30min_incre("AL061851")
expect_equal(nrow(result), 192)
})
landfall_pos("AL182012", "20121029", "1200")
devtools::load_all()
devtools::load_all()
devtools::load_all()
length(c(1, 2, 3))
devtools::load_all()
devtools::load_all()
library(ggplot2)
library(tidyverse)
library(maps)
data("hurdat")
# get hurdat date in 2020, 2021 and 2022
hurdat20 <- hurdat[grepl("^2020", hurdat$date), ]
hurdat21 <- hurdat[grepl("^2021", hurdat$date), ]
hurdat22 <- hurdat[grepl("^2022", hurdat$date), ]
# tracks of the storms in 2020
storm_map(hurdat20$id)
# tracks of the storms in 2021
storm_map(hurdat21$id)
# tracks of the storms in 2022
storm_map(hurdat22$id)
# Get storm data of hurricanes Katrina (2005), Sandy (2012) and Harvey (2017)
hurdat05 <- hurdat[grepl("^2005", hurdat$date), ]
hurdat05k <- hurdat05[grepl("katrina", hurdat05$name, ignore.case = TRUE),]
hurdat12 <- hurdat[grepl("^2012", hurdat$date), ]
hurdat12s <- hurdat12[grepl("Sandy", hurdat12$name, ignore.case = TRUE),]
hurdat17 <- hurdat[grepl("^2017", hurdat$date), ]
hurdat17h <- hurdat17[grepl("Harvey", hurdat17$name, ignore.case = TRUE),]
hurdat22 <- hurdat[grepl("^2022", hurdat$date), ]
hurdat22I <- hurdat22[grepl("Ian", hurdat22$name, ignore.case = TRUE),]
# Return a dataframe storing storms that made US landfall
if_landfall <- function(df){
index <- c()
for (i in 1:nrow(df)){
index <- append(index,landfall_pos(df$id[i], df$date[i], df$time[i]))
}
df <- df[which(index == TRUE),]
return(df)
}
# Get storm tracks that made landfall
hurdat05k <- if_landfall(hurdat05k)
hurdat12s <- if_landfall(hurdat12s)
hurdat17h <- if_landfall(hurdat17h)
hurdat22I <- if_landfall(hurdat22I)
# Get storm tracks with max landfall
hurdat05k <- hurdat05k[which(hurdat05k$max.wind == max(hurdat05k$max.wind)),]
hurdat12s <- hurdat12s[which(hurdat12s$max.wind == max(hurdat12s$max.wind)),]
hurdat17h <- hurdat17h[which(hurdat17h$max.wind == max(hurdat17h$max.wind)),]
hurdat22I <- hurdat22I[which(hurdat22I$max.wind == max(hurdat22I$max.wind)),]
# Katrina (2005) (there are NA in the first row)
position_size(hurdat05k$id[2], hurdat05k$date[2], hurdat05k$time[2])
# Sandy (2012)
position_size(hurdat12s$id, hurdat12s$date, hurdat12s$time)
# Harvey (2017)
position_size(hurdat17h$id, hurdat17h$date, hurdat17h$time)
# Ian (2022)
position_size(hurdat22I$id, hurdat22I$date, hurdat22I$time)
hurdat_grouped <- hurdat %>% group_by(id) %>% group_split()
new_dat <- data.frame()
for (list in hurdat_grouped) {
id <- list$id[1]
name <- list$name[1]
max.wind <- max(list$max.wind)
min.pressure <- min(list$min.pressure)
landfall <- integer(storm_landfall(id))
cyclone_energy <- cyclone_energy(id)
new_dat <- rbind(new_dat, c(id, name, max.wind, min.pressure, landfall,
cyclone_energy))
}
for (list in hurdat_grouped) {
id <- list$id[1]
name <- list$name[1]
max.wind <- max(list$max.wind)
min.pressure <- min(list$min.pressure)
print(storm_landfall(id))
# landfall <- integer(storm_landfall(id))
cyclone_energy <- cyclone_energy(id)
new_dat <- rbind(new_dat, c(id, name, max.wind, min.pressure, landfall,
cyclone_energy))
break
}
for (list in hurdat_grouped) {
id <- list$id[1]
name <- list$name[1]
max.wind <- max(list$max.wind)
min.pressure <- min(list$min.pressure)
landfall <- integer(sum(storm_landfall(id)))
cyclone_energy <- cyclone_energy(id)
new_dat <- rbind(new_dat, c(id, name, max.wind, min.pressure, landfall,
cyclone_energy))
break
}
colnames(new_data) <- c("id", "name", "max.wind", "min.pressure", "landfall",
"cyclone_energy")
colnames(new_dat) <- c("id", "name", "max.wind", "min.pressure", "landfall",
"cyclone_energy")
new_dat
hurdat_grouped <- hurdat %>% group_by(id) %>% group_split()
new_dat <- data.frame()
for (list in hurdat_grouped) {
id <- list$id[1]
name <- list$name[1]
max.wind <- max(list$max.wind)
min.pressure <- min(list$min.pressure)
landfall <- integer(sum(storm_landfall(id)))
cyclone_energy <- cyclone_energy(id)
new_dat <- rbind(new_dat, c(id, name, max.wind, min.pressure, landfall,
cyclone_energy))
break
}
colnames(new_dat) <- c("id", "name", "max.wind", "min.pressure", "landfall",
"cyclone_energy")
new_dat
hurdat_grouped <- hurdat %>% group_by(id) %>% group_split()
new_dat <- data.frame()
for (list in hurdat_grouped) {
id <- list$id[1]
name <- list$name[1]
max.wind <- max(list$max.wind)
min.pressure <- min(list$min.pressure)
landfall <- integer(sum(storm_landfall(id)))
cyclone_energy <- cyclone_energy(id)
new_dat <- rbind(new_dat, c(id, name, max.wind, min.pressure, landfall,
cyclone_energy))
}
devtools::load_all()
library(ggplot2)
library(tidyverse)
library(maps)
data("hurdat")
# get hurdat date in 2020, 2021 and 2022
hurdat20 <- hurdat[grepl("^2020", hurdat$date), ]
hurdat21 <- hurdat[grepl("^2021", hurdat$date), ]
hurdat22 <- hurdat[grepl("^2022", hurdat$date), ]
# tracks of the storms in 2020
storm_map(hurdat20$id)
unique(hurdat$id)
unique_id <- unique(hurdat$id)
test <- c(NA, 0, NA)
min(test)
sum(test)
unique_id <- unique(hurdat$id)
new_dat <- data.frame()
for (id in unique_id) {
temp <- hurdat[which(hurdat$id) %in% id, ]
name <- temp$name
max.wind <- max(temp$max.wind)
min.pressure <- ifelse(is.na(min(temp$min.pressure)), 0, min(temp$min.pressure))
landfall <- integer(sum(storm_landfall(id)) >= 1)
cyclone_energy <- cyclone_energy(id)
new_dat <- rbind(new_dat, c(id, name, max.wind, min.pressure, landfall,
cyclone_energy))
}
unique_id <- unique(hurdat$id)
new_dat <- data.frame()
for (id in unique_id) {
temp <- hurdat[which(hurdat$id %in% id), ]
name <- temp$name
max.wind <- max(temp$max.wind)
min.pressure <- ifelse(is.na(min(temp$min.pressure)), 0, min(temp$min.pressure))
landfall <- integer(sum(storm_landfall(id)) >= 1)
cyclone_energy <- cyclone_energy(id)
new_dat <- rbind(new_dat, c(id, name, max.wind, min.pressure, landfall,
cyclone_energy))
}
storm_landfall("AL011851")
unique_id <- unique(hurdat$id)
new_dat <- data.frame()
for (id in unique_id) {
temp <- hurdat[which(hurdat$id %in% id), ]
name <- temp$name
max.wind <- max(temp$max.wind)
min.pressure <- ifelse(is.na(min(temp$min.pressure)), 0, min(temp$min.pressure))
landfall <- integer(storm_landfall(id))
cyclone_energy <- cyclone_energy(id)
new_dat <- rbind(new_dat, c(id, name, max.wind, min.pressure, landfall,
cyclone_energy))
}
unique_id <- unique(hurdat$id)
new_dat <- data.frame()
for (id in unique_id) {
temp <- hurdat[which(hurdat$id %in% id), ]
name <- temp$name
max.wind <- max(temp$max.wind)
min.pressure <- ifelse(is.na(min(temp$min.pressure)), 0, min(temp$min.pressure))
landfall <- storm_landfall(id)
cyclone_energy <- cyclone_energy(id)
new_dat <- rbind(new_dat, c(id, name, max.wind, min.pressure, landfall,
cyclone_energy))
}
unique_id <- unique(hurdat$id)
new_dat <- data.frame()
for (id in unique_id) {
temp <- hurdat[which(hurdat$id %in% id), ]
name <- temp$name
max.wind <- max(temp$max.wind)
min.pressure <- ifelse(is.na(min(temp$min.pressure)), 0, min(temp$min.pressure))
landfall <- storm_landfall(id)
cyclone_energy <- cyclone_energy(id)
new_dat <- append(new_dat, c(id, name, max.wind, min.pressure, landfall,
cyclone_energy))
}
# Get unique ids
unique_id <- unique(hurdat$id)
# Create empty data frame with column names
new_dat <- data.frame(id = character(),
name = character(),
max.wind = numeric(),
min.pressure = numeric(),
landfall = character(),
cyclone_energy = numeric(),
stringsAsFactors = FALSE)
# Loop through unique ids and extract required data
for (id in unique_id) {
temp <- hurdat[hurdat$id == id, ]
name <- unique(temp$name)
max.wind <- max(temp$max.wind)
min.pressure <- ifelse(is.na(min(temp$min.pressure)), 0, min(temp$min.pressure))
landfall <- storm_landfall(id)
cyclone_energy <- cyclone_energy(id)
new_row <- data.frame(id, name, max.wind, min.pressure, landfall, cyclone_energy,
stringsAsFactors = FALSE)
new_dat <- rbind(new_dat, new_row)
}
# Get unique ids
unique_id <- unique(hurdat$id)
# Create empty data frame with column names
new_dat <- data.frame(id = character(),
name = character(),
max.wind = numeric(),
min.pressure = numeric(),
landfall = character(),
cyclone_energy = numeric(),
stringsAsFactors = FALSE)
# Loop through unique ids and extract required data
for (id in unique_id) {
temp <- hurdat[hurdat$id == id, ]
name <- unique(temp$name)
max.wind <- max(temp$max.wind)
min.pressure <- ifelse(is.na(min(temp$min.pressure)), 0, min(temp$min.pressure))
landfall <- storm_landfall(id)
cyclone_energy <- cyclone_energy(id)
new_row <- data.frame(id, name, max.wind, min.pressure, landfall, cyclone_energy,
stringsAsFactors = FALSE)
new_dat <- rbind(new_dat, new_row)
print(id)
}
# Get unique ids
unique_id <- unique(hurdat$id)
# Create empty data frame with column names
new_dat <- data.frame(id = character(),
name = character(),
max.wind = numeric(),
min.pressure = numeric(),
landfall = character(),
cyclone_energy = numeric(),
stringsAsFactors = FALSE)
# Loop through unique ids and extract required data
for (id in unique_id) {
temp <- hurdat[hurdat$id == id, ]
name <- unique(temp$name)
max.wind <- max(temp$max.wind)
min.pressure <- ifelse(is.na(min(temp$min.pressure)), 0, min(temp$min.pressure))
landfall <- storm_landfall(id)
cyclone_energy <- cyclone_energy(id)
new_row <- data.frame(id, name, max.wind, min.pressure, landfall, cyclone_energy,
stringsAsFactors = FALSE)
new_dat <- rbind(new_dat, new_row)
print(new_row)
}
# Get unique ids
unique_id <- unique(hurdat$id)
# Create empty data frame with column names
new_dat <- data.frame(id = character(),
name = character(),
max.wind = numeric(),
min.pressure = numeric(),
landfall = character(),
cyclone_energy = numeric(),
stringsAsFactors = FALSE)
# Loop through unique ids and extract required data
for (id in unique_id) {
temp <- hurdat[hurdat$id == id, ]
name <- unique(temp$name)
max.wind <- max(temp$max.wind)
min.pressure <- ifelse(is.na(min(temp$min.pressure)), 0, min(temp$min.pressure))
landfall <- storm_landfall(id)
cyclone_energy <- cyclone_energy(id)
new_row <- data.frame(id, name, max.wind, min.pressure, landfall, cyclone_energy,
stringsAsFactors = FALSE)
new_dat <- rbind(new_dat, new_row)
}
head(new_dat)
View(new_dat)
head(new_dat)
