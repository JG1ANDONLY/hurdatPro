stormz_30min_incre("AL011851")
stormz_30min_incre <- function(storm.id) {
if (length(storm.id) == 0) {
stop("The input storm ID cannot be empty")
}
if (!all(storm.id %in% hurdat$id)) {
stop("At least 1 value of the input is a valid storm ID number.")
}
# hurdat <- readRDS(system.file("data/hurdat.RData", package = "hurdatPro"))
# Select only the storm with the specified ID
storm <- hurdat[hurdat$id %in% storm.id,]
# Create an empty data frame to store the new storm track info
track_new <- data.frame(stormid = character(), time = character(),
latitude = numeric(), longitude = numeric(),
stringsAsFactors = FALSE)
# Iterate over each row of the storm data and add 30-minute intervals
for (i in 1:nrow(storm)) {
row <- storm[i, ]
dnt <- as.POSIXct(paste0(row$date, sprintf("%04d", as.numeric(row$time))), format = "%Y%m%d%H%M")
DNT <- format(dnt, "%Y/%m/%d %H:%M")
lat <- row$numeric.latitude
long <- row$numeric.longitude
track <- rbind(track, data.frame(stormid = row$id, time = DNT, latitude = lat, longitude = long))
# calculate 30-minute intervals and add to the track data frame
if (i < nrow(storm)) {
next_row <- storm[i+1, ]
dnt1 <- as.POSIXct(paste0(next_row$date, sprintf("%04d", as.numeric(next_row$time))), format = "%Y%m%d%H%M")
num <- as.numeric(dnt1 - dnt)/1800
la_increase <- as.numeric(next_row$numeric.latitude - lat)/num
lo_increase <- as.numeric(next_row$numeric.longitude - long)/num
for (j in 1:(num-1)) {
dnt <- dnt + 1800
DNT <- format(dnt, "%Y/%m/%d %H:%M")
lat <- round(lat + la_increase, 4)
long <- round(long + lo_increase, 4)
track_new <- rbind(track, data.frame(stormid = row$id, time = DNT, latitude = lat, longitude = long))
}
}
}
return(track)
}
stormz_30min_incre("AL011851")
stormz_30min_incre <- function(storm.id) {
if (length(storm.id) == 0) {
stop("The input storm ID cannot be empty")
}
if (!all(storm.id %in% hurdat$id)) {
stop("At least 1 value of the input is a valid storm ID number.")
}
# hurdat <- readRDS(system.file("data/hurdat.RData", package = "hurdatPro"))
track <- hurdat[
which(hurdat$id %in% storm.id),
c(
"id", "date", "time", "numeric.latitude",
"numeric.longitude"
)
]
track_list <- split(track, track$id)
for (eachTrack in track_list) {
date_list <- split(eachTrack, eachTrack$date)
for (eachDate in date_list) {
eachDate$time <- trimws(eachDate$time)
for (num in seq(1, nrow(eachDate), by = 2)) {
start <- eachDate[num, "time"]
startHour <-  substr(start, start = 1, stop = 2)
startMin <- substr(start, start = 3, stop = 4)
startTime <- paste0(startHour, ":", startMin)
if (num != length(eachDate)) {
end <- eachDate[num + 1, "time"]
} else {
end <- "0000"
}
endHour <-  substr(end, start = 1, stop = 2)
endMin <- substr(end, start = 3, stop = 4)
endTime <- paste0(endHour, ":", endMin)
startTime <-  strptime(startTime, format = "%H:%M")
endTime <- strptime(endTime, format = "%H:%M")
# test <- seq.POSIXt(from = startTime, to = endTime, by = "30 min")
return(seq.POSIXt(from = startTime, to = endTime, by = "30 min"))
#
}
break
}
}
# track_new <- data.frame(
#   stormid = character(), time = character(),
#   latitude = numeric(), longitude = numeric(),
#   stringsAsFactors = FALSE
# )
#
# for (index in 1:nrow(track)) {
#   row <- track[index, ]
#   dnt <- as.POSIXct(paste0(row$date, sprintf("%04d", as.numeric(row$time))), format = "%Y%m%d%H%M")
#   DNT <- format(dnt, "%Y/%m/%d %H:%M")
#   track_new <- rbind(track_new, data.frame(
#     stormid = row$id, time = DNT,
#     latitude = row$numeric.latitude,
#     longitude = row$numeric.longitude
#   ))
#   if (index < nrow(track)) {
#     next_row <- track[index + 1, ]
#     dnt1 <- as.POSIXct(paste0(next_row$date, sprintf("%04d", as.numeric(next_row$time))), format = "%Y%m%d%H%M")
#     num <- as.numeric(dnt1 - dnt) / 1800
#     la_increase <- as.numeric(next_row$numeric.latitude - row$numeric.latitude) / num
#     lo_increase <- as.numeric(next_row$numeric.longitude - row$numeric.longitude) / num
#     for (j in 1:(num - 1)) {
#       dnt <- dnt + 1800
#       DNT <- format(dnt, "%Y/%m/%d %H:%M")
#       lat <- round(row$numeric.latitude + la_increase, 4)
#       long <- round(row$numeric.longitude + lo_increase, 4)
#       track_new <- rbind(track_new, data.frame(stormid = row$id, time = DNT, latitude = lat, longitude = long))
#     }
#   }
# }
# return(track_new)
}
stormz_30min_incre("AL011851")
stormz_30min_incre <- function(storm.id) {
if (length(storm.id) == 0) {
stop("The input storm ID cannot be empty")
}
if (!all(storm.id %in% hurdat$id)) {
stop("At least 1 value of the input is a valid storm ID number.")
}
# hurdat <- readRDS(system.file("data/hurdat.RData", package = "hurdatPro"))
track <- hurdat[
which(hurdat$id %in% storm.id),
c(
"id", "date", "time", "numeric.latitude",
"numeric.longitude"
)
]
track_list <- split(track, track$id)
for (eachTrack in track_list) {
date_list <- split(eachTrack, eachTrack$date)
for (eachDate in date_list) {
eachDate$time <- trimws(eachDate$time)
if (eachDate$time[nrow(df)] != "0000") {
eachDate <- rbind(eachDate, c(eachDate$id, eachDate$date, "0000",
eachDate$numeric.latitude,
eachDate$numeric.longitude))
print(eachDate)
}
# for (num in seq(1, nrow(eachDate), by = 2)) {
#     start <- eachDate[num, "time"]
#     startHour <-  substr(start, start = 1, stop = 2)
#     startMin <- substr(start, start = 3, stop = 4)
#     startTime <- paste0(startHour, ":", startMin)
#     if (num != length(eachDate)) {
#         end <- eachDate[num + 1, "time"]
#     } else {
#         end <- "0000"
#     }
#     endHour <-  substr(end, start = 1, stop = 2)
#     endMin <- substr(end, start = 3, stop = 4)
#     endTime <- paste0(endHour, ":", endMin)
#
#     startTime <-  strptime(startTime, format = "%H:%M")
#     endTime <- strptime(endTime, format = "%H:%M")
#     # test <- seq.POSIXt(from = startTime, to = endTime, by = "30 min")
#     return(seq.POSIXt(from = startTime, to = endTime, by = "30 min"))
# #
# }
# break
for (index in 1:nrow(eachDate)) {
if (index != nrow(eachDate)) {
}
}
}
}
}
stormz_30min_incre("AL011851")
stormz_30min_incre <- function(storm.id) {
if (length(storm.id) == 0) {
stop("The input storm ID cannot be empty")
}
if (!all(storm.id %in% hurdat$id)) {
stop("At least 1 value of the input is a valid storm ID number.")
}
# hurdat <- readRDS(system.file("data/hurdat.RData", package = "hurdatPro"))
track <- hurdat[
which(hurdat$id %in% storm.id),
c(
"id", "date", "time", "numeric.latitude",
"numeric.longitude"
)
]
track_list <- split(track, track$id)
for (eachTrack in track_list) {
date_list <- split(eachTrack, eachTrack$date)
for (eachDate in date_list) {
eachDate$time <- trimws(eachDate$time)
if (eachDate$time[nrow(eachDate)] != "0000") {
eachDate <- rbind(eachDate, c(eachDate$id, eachDate$date, "0000",
eachDate$numeric.latitude,
eachDate$numeric.longitude))
print(eachDate)
}
# for (num in seq(1, nrow(eachDate), by = 2)) {
#     start <- eachDate[num, "time"]
#     startHour <-  substr(start, start = 1, stop = 2)
#     startMin <- substr(start, start = 3, stop = 4)
#     startTime <- paste0(startHour, ":", startMin)
#     if (num != length(eachDate)) {
#         end <- eachDate[num + 1, "time"]
#     } else {
#         end <- "0000"
#     }
#     endHour <-  substr(end, start = 1, stop = 2)
#     endMin <- substr(end, start = 3, stop = 4)
#     endTime <- paste0(endHour, ":", endMin)
#
#     startTime <-  strptime(startTime, format = "%H:%M")
#     endTime <- strptime(endTime, format = "%H:%M")
#     # test <- seq.POSIXt(from = startTime, to = endTime, by = "30 min")
#     return(seq.POSIXt(from = startTime, to = endTime, by = "30 min"))
# #
# }
# break
for (index in 1:nrow(eachDate)) {
if (index != nrow(eachDate)) {
}
}
}
}
}
stormz_30min_incre("AL011851")
stormz_30min_incre <- function(storm.id) {
if (length(storm.id) == 0) {
stop("The input storm ID cannot be empty")
}
if (!all(storm.id %in% hurdat$id)) {
stop("At least 1 value of the input is a valid storm ID number.")
}
# hurdat <- readRDS(system.file("data/hurdat.RData", package = "hurdatPro"))
track <- hurdat[
which(hurdat$id %in% storm.id),
c(
"id", "date", "time", "numeric.latitude",
"numeric.longitude"
)
]
track_list <- split(track, track$id)
for (eachTrack in track_list) {
date_list <- split(eachTrack, eachTrack$date)
for (eachDate in date_list) {
eachDate$time <- trimws(eachDate$time)
if (eachDate$time[nrow(eachDate)] != "0000") {
eachDate <- rbind(eachDate, c(eachDate$id[nrow(eachDate)],
eachDate$date[nrow(eachDate)], "0000",
eachDate$numeric.latitude[nrow(eachDate)],
eachDate$numeric.longitude[nrow(eachDate)]))
print(eachDate)
}
# for (num in seq(1, nrow(eachDate), by = 2)) {
#     start <- eachDate[num, "time"]
#     startHour <-  substr(start, start = 1, stop = 2)
#     startMin <- substr(start, start = 3, stop = 4)
#     startTime <- paste0(startHour, ":", startMin)
#     if (num != length(eachDate)) {
#         end <- eachDate[num + 1, "time"]
#     } else {
#         end <- "0000"
#     }
#     endHour <-  substr(end, start = 1, stop = 2)
#     endMin <- substr(end, start = 3, stop = 4)
#     endTime <- paste0(endHour, ":", endMin)
#
#     startTime <-  strptime(startTime, format = "%H:%M")
#     endTime <- strptime(endTime, format = "%H:%M")
#     # test <- seq.POSIXt(from = startTime, to = endTime, by = "30 min")
#     return(seq.POSIXt(from = startTime, to = endTime, by = "30 min"))
# #
# }
# break
for (index in 1:nrow(eachDate)) {
if (index != nrow(eachDate)) {
}
}
}
}
}
stormz_30min_incre("AL011851")
stormz_30min_incre <- function(storm.id) {
if (length(storm.id) == 0) {
stop("The input storm ID cannot be empty")
}
if (!all(storm.id %in% hurdat$id)) {
stop("At least 1 value of the input is a valid storm ID number.")
}
# hurdat <- readRDS(system.file("data/hurdat.RData", package = "hurdatPro"))
track <- hurdat[
which(hurdat$id %in% storm.id),
c(
"id", "date", "time", "numeric.latitude",
"numeric.longitude"
)
]
track_list <- split(track, track$id)
for (eachTrack in track_list) {
date_list <- split(eachTrack, eachTrack$date)
for (eachDate in date_list) {
eachDate$time <- trimws(eachDate$time)
if (eachDate$time[nrow(eachDate)] != "0000") {
eachDate <- rbind(eachDate, c(eachDate$id[nrow(eachDate)],
eachDate$date[nrow(eachDate)], "0000",
eachDate$numeric.latitude[nrow(eachDate)],
eachDate$numeric.longitude[nrow(eachDate)]))
}
for (num in 1:length(eachDate)) {
start <- eachDate[num, "time"]
startHour <-  substr(start, start = 1, stop = 2)
startMin <- substr(start, start = 3, stop = 4)
startTime <- paste0(startHour, ":", startMin)
print(startTime)
# if (num != length(eachDate)) {
#     end <- eachDate[num + 1, "time"]
# } else {
#     end <- "0000"
# }
# endHour <-  substr(end, start = 1, stop = 2)
# endMin <- substr(end, start = 3, stop = 4)
# endTime <- paste0(endHour, ":", endMin)
#
#               startTime <-  strptime(startTime, format = "%H:%M")
#               endTime <- strptime(endTime, format = "%H:%M")
#               # test <- seq.POSIXt(from = startTime, to = endTime, by = "30 min")
#               return(seq.POSIXt(from = startTime, to = endTime, by = "30 min"))
#
break
}
# break
}
}
}
stormz_30min_incre("AL011851")
stormz_30min_incre <- function(storm.id) {
if (length(storm.id) == 0) {
stop("The input storm ID cannot be empty")
}
if (!all(storm.id %in% hurdat$id)) {
stop("At least 1 value of the input is a valid storm ID number.")
}
# hurdat <- readRDS(system.file("data/hurdat.RData", package = "hurdatPro"))
track <- hurdat[
which(hurdat$id %in% storm.id),
c(
"id", "date", "time", "numeric.latitude",
"numeric.longitude"
)
]
track_list <- split(track, track$id)
for (eachTrack in track_list) {
date_list <- split(eachTrack, eachTrack$date)
for (eachDate in date_list) {
eachDate$time <- trimws(eachDate$time)
if (eachDate$time[nrow(eachDate)] != "0000") {
eachDate <- rbind(eachDate, c(eachDate$id[nrow(eachDate)],
eachDate$date[nrow(eachDate)], "0000",
eachDate$numeric.latitude[nrow(eachDate)],
eachDate$numeric.longitude[nrow(eachDate)]))
}
for (num in 1:length(eachDate)) {
start <- eachDate[num, "time"]
startHour <-  substr(start, start = 1, stop = 2)
startMin <- substr(start, start = 3, stop = 4)
startTime <- paste0(startHour, ":", startMin)
print(startTime)
# if (num != length(eachDate)) {
#     end <- eachDate[num + 1, "time"]
# } else {
#     end <- "0000"
# }
# endHour <-  substr(end, start = 1, stop = 2)
# endMin <- substr(end, start = 3, stop = 4)
# endTime <- paste0(endHour, ":", endMin)
#
#               startTime <-  strptime(startTime, format = "%H:%M")
#               endTime <- strptime(endTime, format = "%H:%M")
#               # test <- seq.POSIXt(from = startTime, to = endTime, by = "30 min")
#               return(seq.POSIXt(from = startTime, to = endTime, by = "30 min"))
#
}
break
}
}
}
stormz_30min_incre("AL011851")
stormz_30min_incre <- function(storm.id) {
if (length(storm.id) == 0) {
stop("The input storm ID cannot be empty")
}
if (!all(storm.id %in% hurdat$id)) {
stop("At least 1 value of the input is a valid storm ID number.")
}
# hurdat <- readRDS(system.file("data/hurdat.RData", package = "hurdatPro"))
track <- hurdat[
which(hurdat$id %in% storm.id),
c(
"id", "date", "time", "numeric.latitude",
"numeric.longitude"
)
]
track_list <- split(track, track$id)
for (eachTrack in track_list) {
date_list <- split(eachTrack, eachTrack$date)
for (eachDate in date_list) {
eachDate$time <- trimws(eachDate$time)
eachDate <- rbind(eachDate, c(eachDate$id[nrow(eachDate)],
eachDate$date[nrow(eachDate)], "0000",
eachDate$numeric.latitude[nrow(eachDate)],
eachDate$numeric.longitude[nrow(eachDate)]))
for (num in 1:length(eachDate)-1) {
start <- eachDate[num, "time"]
startHour <-  substr(start, start = 1, stop = 2)
startMin <- substr(start, start = 3, stop = 4)
startTime <- paste0(startHour, ":", startMin)
print(startTime)
# if (num != length(eachDate)) {
#     end <- eachDate[num + 1, "time"]
# } else {
#     end <- "0000"
# }
# endHour <-  substr(end, start = 1, stop = 2)
# endMin <- substr(end, start = 3, stop = 4)
# endTime <- paste0(endHour, ":", endMin)
#
#               startTime <-  strptime(startTime, format = "%H:%M")
#               endTime <- strptime(endTime, format = "%H:%M")
#               # test <- seq.POSIXt(from = startTime, to = endTime, by = "30 min")
#               return(seq.POSIXt(from = startTime, to = endTime, by = "30 min"))
break
}
}
}
stormz_30min_incre <- function(storm.id) {
if (length(storm.id) == 0) {
stop("The input storm ID cannot be empty")
}
if (!all(storm.id %in% hurdat$id)) {
stop("At least 1 value of the input is a valid storm ID number.")
}
# hurdat <- readRDS(system.file("data/hurdat.RData", package = "hurdatPro"))
track <- hurdat[
which(hurdat$id %in% storm.id),
c(
"id", "date", "time", "numeric.latitude",
"numeric.longitude"
)
]
track_list <- split(track, track$id)
for (eachTrack in track_list) {
date_list <- split(eachTrack, eachTrack$date)
for (eachDate in date_list) {
eachDate$time <- trimws(eachDate$time)
eachDate <- rbind(eachDate, c(eachDate$id[nrow(eachDate)],
eachDate$date[nrow(eachDate)], "0000",
eachDate$numeric.latitude[nrow(eachDate)],
eachDate$numeric.longitude[nrow(eachDate)]))
for (num in 1:length(eachDate)-1) {
start <- eachDate[num, "time"]
startHour <-  substr(start, start = 1, stop = 2)
startMin <- substr(start, start = 3, stop = 4)
startTime <- paste0(startHour, ":", startMin)
print(startTime)
# if (num != length(eachDate)) {
#     end <- eachDate[num + 1, "time"]
# } else {
#     end <- "0000"
# }
# endHour <-  substr(end, start = 1, stop = 2)
# endMin <- substr(end, start = 3, stop = 4)
# endTime <- paste0(endHour, ":", endMin)
#
#               startTime <-  strptime(startTime, format = "%H:%M")
#               endTime <- strptime(endTime, format = "%H:%M")
#               # test <- seq.POSIXt(from = startTime, to = endTime, by = "30 min")
#               return(seq.POSIXt(from = startTime, to = endTime, by = "30 min"))
break
}
}
}
}
stormz_30min_incre("AL011851")
df <- read.csv("https://raw.github.coecis.cornell.edu/jsg342/statcomp2023/main/datasets/hurdat2-1851-2022-040723.txt?token=GHSAT0AAAAAAAAANP6TER7C3F5K55R7K7MQZC6SVNQ", header = FALSE, na.strings = "")
hurdat <- data.frame(matrix(NA, nrow = 0, ncol = ncol(df) + 2))
colnames(hurdat) <- c("id", "name", "date", "time","event", "status", "latitude",
"longitude", "max.wind", "min.pressure", "ne34", "se34",
"sw34", "nw34", "ne50", "se50","sw50", "nw50", "ne64",
"se64","sw64", "nw64", "r.max.wind")
al.index <- grep("^AL", df$V1)
accu <- 1
for (index in 2:length(al.index)) {
start <- al.index[index - 1] + 1
end <- al.index[index] - 1
code <- df$V1[start - 1]
name <- df$V2[start - 1]
incre <- al.index[index] - al.index[index - 1] - 1
accu0 <- accu + incre-1
hurdat[accu:accu0, ] <- cbind(code, name, df[start:end, ])
accu <- accu+incre
}
hurdat[53947:53972, ] <- cbind(df$V1[al.index[1952]], df$V2[al.index[1952]],
df[55899:55924,])
hurdat[hurdat == -99] <- NA
hurdat[hurdat == -999] <- NA
hurdat$numeric.latitude <- as.numeric(gsub("[^0-9\\.]", "", hurdat$latitude))
hurdat$numeric.longitude <- as.numeric(gsub("[^0-9\\.]", "", hurdat$longitude)) - 180
write.csv(hurdat, file = "hurdat.RData")
write.csv(hurdat, file = "hurdat.csv")
?write.csv
write.csv(hurdat, file = "hurdat.csv", row.names = FALSE)
